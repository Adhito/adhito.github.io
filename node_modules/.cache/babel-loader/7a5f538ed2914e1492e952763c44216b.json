{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports', 'react', 'classnames', 'prop-types'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('react'), require('classnames'), require('prop-types'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.react, global.classnames, global.propTypes);\n    global.index = mod.exports;\n  }\n})(this, function (exports, _react, _classnames, _propTypes) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Tab = exports.Tabs = undefined;\n\n  var _react2 = _interopRequireDefault(_react);\n\n  var _classnames2 = _interopRequireDefault(_classnames);\n\n  var _propTypes2 = _interopRequireDefault(_propTypes);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var TabsComponent = function (_React$Component) {\n    _inherits(TabsComponent, _React$Component);\n\n    function TabsComponent(props) {\n      _classCallCheck(this, TabsComponent);\n\n      var _this = _possibleConstructorReturn(this, (TabsComponent.__proto__ || Object.getPrototypeOf(TabsComponent)).call(this, props));\n\n      _this._renderHeader = function (tab, index) {\n        var isActive = false;\n\n        if (typeof _this.state.selected === 'number') {\n          isActive = _this.state.selected == index;\n        } else {\n          isActive = _this.state.selected === tab.props.label;\n        }\n\n        var customActiveHeaderClass = !isActive ? null : (0, _classnames2.default)('active', _this.props.activeHeaderClass, tab.props.activeHeaderClass);\n        var linkClasses = (0, _classnames2.default)('nav-link', _this.props.headerClass, tab.props.headerClass, customActiveHeaderClass, {\n          'disabled': tab.props.disabled\n        });\n        var customActiveHeaderStyle = !isActive ? null : Object.assign({}, _this.props.activeHeaderStyle, tab.props.activeHeaderStyle);\n        var linkStyle = Object.assign({}, _this.props.headerStyle, tab.props.headerStyle, customActiveHeaderStyle);\n        return _react2.default.createElement('li', {\n          key: index,\n          className: 'nav-item'\n        }, _react2.default.createElement('a', {\n          className: linkClasses,\n          style: linkStyle,\n          onClick: tab.props.disabled ? null : _this._handleClick.bind(_this, index)\n        }, tab.props.label));\n      };\n\n      _this.state = {\n        selected: _this.props.selected\n      };\n      return _this;\n    }\n\n    _createClass(TabsComponent, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        this.setState({\n          selected: nextProps.selected\n        });\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var classNames = (0, _classnames2.default)('tabs', this.props.className);\n        return _react2.default.createElement('div', {\n          className: classNames,\n          style: this.props.style\n        }, this._renderHeaders(), this._renderContent());\n      }\n    }, {\n      key: '_renderHeaders',\n      value: function _renderHeaders() {\n        if (this.props.children === undefined) {\n          return null;\n        }\n\n        return _react2.default.createElement('ul', {\n          role: 'tablist',\n          className: 'nav nav-tabs'\n        }, Array.isArray(this.props.children) ? this.props.children.map(this._renderHeader.bind(this)) : this._renderHeader(this.props.children, 0));\n      }\n    }, {\n      key: '_renderContent',\n      value: function _renderContent() {\n        if (this.props.children === undefined) {\n          return null;\n        }\n\n        var onlyOneChild = !Array.isArray(this.props.children);\n        var selected = this.state.selected; // Find the tab index - selected could be the index or could be the tab label\n\n        var selectedIndex = void 0;\n\n        if (typeof selected === 'number') {\n          selectedIndex = selected;\n\n          if (selectedIndex < 0) {\n            console.warn('tab index \\'' + this.state.selected + '\\' < 0, defaulting to first tab');\n            selectedIndex = 0;\n            selected = selectedIndex;\n          } else {\n            var tabCount = this.props.children.length || 1;\n\n            if (selectedIndex > tabCount - 1) {\n              console.warn('tab index \\'' + this.state.selected + '\\' > number of tabs (' + tabCount + ', defaulting to last tab');\n              selectedIndex = tabCount - 1;\n              selected = selectedIndex;\n            }\n          }\n        } else {\n          // selected is a string - should be the tab label so find the index of that tab\n          var selectedLabel = this.state.selected;\n          selectedIndex = onlyOneChild ? 0 : this.props.children.findIndex(function (child) {\n            return selectedLabel === child.props.label;\n          });\n\n          if (selectedIndex < 0) {\n            console.warn('tab \\'' + this.state.selected + '\\' not found, defaulting to first tab');\n            selectedIndex = 0;\n            selected = onlyOneChild ? this.props.children.props.label : this.props.children[selectedIndex].props.label;\n          }\n        } // If the selected tab has changed then we need to update the state\n\n\n        if (selected !== this.state.selected) {\n          this.setState({\n            selected: selected\n          });\n        }\n\n        var contentTab = onlyOneChild ? this.props.children : this.props.children[selectedIndex];\n        var contentClassNames = (0, _classnames2.default)('tab-content', this.props.contentClass, contentTab.props.className);\n        var contentStyle = Object.assign({}, this.props.contentStyle, contentTab.props.style);\n        return _react2.default.createElement('div', {\n          className: contentClassNames,\n          style: contentStyle\n        }, contentTab);\n      }\n    }, {\n      key: '_handleClick',\n      value: function _handleClick(index, event) {\n        event.preventDefault();\n        this.setState({\n          selected: index\n        });\n\n        if (this.props.onSelect !== undefined) {\n          this.props.onSelect(index, this.props.children[index].props.label);\n        }\n      }\n    }]);\n\n    return TabsComponent;\n  }(_react2.default.Component);\n\n  TabsComponent.propTypes = {\n    /**\n     * The selected tab - either the index of it or the label string.  Defaults to tab 0 if not supplied\n     */\n    selected: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n\n    /**\n     * Optional CSS class to apply to the Tabs component overall\n     */\n    className: _propTypes2.default.string,\n\n    /**\n     * Optional CSS style to apply to the Tabs component overall\n     */\n    style: _propTypes2.default.object,\n\n    /**\n     * Optional CSS class to apply to each tab header\n     */\n    headerClass: _propTypes2.default.string,\n\n    /**\n     * Optional CSS style to apply to each tab header\n     */\n    headerStyle: _propTypes2.default.object,\n\n    /**\n     * Optional CSS class to apply to the active tab header\n     */\n    activeHeaderClass: _propTypes2.default.string,\n\n    /**\n     * Optional CSS style to apply to the active tab header\n     */\n    activeHeaderStyle: _propTypes2.default.object,\n\n    /**\n     * Optional CSS class to apply to the content container for the currently selected tab\n     */\n    contentClass: _propTypes2.default.string,\n\n    /**\n     * Optional CSS style to apply to the content container for the currently selected tab\n     */\n    contentStyle: _propTypes2.default.object,\n\n    /**\n     * Optional method to call when a tab is selected.  Receive the tab index and tab label of the selected tab\n     */\n    onSelect: _propTypes2.default.func,\n\n    /**\n     * The child tabs to display - either an array or an element\n     */\n    children: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.element])\n  };\n  TabsComponent.defaultProps = {\n    selected: 0\n  };\n  ;\n  /**\n   * React Bootstrap Tab component (to be contained by a <Tabs> component\n   * usage:\n   * <Tab label=\"Tab 1\">\n   *     <div>Tab 1 contents!</div>\n   * </Tab>\n   */\n\n  var TabComponent = function (_React$Component2) {\n    _inherits(TabComponent, _React$Component2);\n\n    function TabComponent(props) {\n      _classCallCheck(this, TabComponent);\n\n      return _possibleConstructorReturn(this, (TabComponent.__proto__ || Object.getPrototypeOf(TabComponent)).call(this, props));\n    }\n\n    _createClass(TabComponent, [{\n      key: 'render',\n      value: function render() {\n        return _react2.default.createElement('div', null, this.props.children);\n      }\n    }]);\n\n    return TabComponent;\n  }(_react2.default.Component);\n\n  TabComponent.propTypes = {\n    /**\n     * Label to display as the tab header\n     */\n    label: _propTypes2.default.string.isRequired,\n\n    /**\n     * Is this tab disabled?  Default: false\n     */\n    disabled: _propTypes2.default.bool,\n\n    /**\n     * Optional CSS class to apply to the tab overall\n     */\n    className: _propTypes2.default.string,\n\n    /**\n     * Optional CSS style to apply to the tab overall\n     */\n    style: _propTypes2.default.object,\n\n    /**\n     * Optional CSS class to apply to the tab header\n     */\n    headerClass: _propTypes2.default.string,\n\n    /**\n      * Optional CSS style to apply to the tab header\n      */\n    headerStyle: _propTypes2.default.object,\n\n    /**\n     * Optional CSS style to apply to the active tab header\n     */\n    activeHeaderStyle: _propTypes2.default.object,\n\n    /**\n     * Optional CSS class to apply to the tab header when active\n     */\n    activeHeaderClass: _propTypes2.default.string\n  };\n  ;\n  exports.Tabs = TabsComponent;\n  exports.Tab = TabComponent;\n});","map":null,"metadata":{},"sourceType":"script"}